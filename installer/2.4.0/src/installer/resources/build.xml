<?xml version="1.0" encoding="UTF-8"?>
<project name="Shibboleth Identity Provider" basedir="../../.." default="install">

    <!-- Load property from the environment -->
    <property environment="env"/>

    <property name="installer.home" value="${basedir}"/>
    <property name="installer.dir" value="${installer.home}/src/installer"/>
    <property name="etc.dir" value="${basedir}/../etc" />

    <property name="resources.dir" value="${installer.dir}/resources"/>
    <property name="tools.dir" value="${basedir}/src/tools"/>
    <property name="webapp.dir" value="${basedir}/src/main/webapp"/>
    <property name="shib.cas.dir" value="${basedir}/../../shib-cas-authenticator" />
    <property name="idp.fragment.path" value="${env.CATALINA_HOME}/conf/Catalina/localhost" />
    <property name="idp.casinvoker.libs" value="${shib.cas.dir}/idp-cas-invoker/build/libs" />    
    <property name="facade.web.xml" value="${shib.cas.dir}/cas-authentication-facade/src/main/webapp/WEB-INF/web.xml" />
    <property name="facade.war.file" value="${shib.cas.dir}/cas-authentication-facade/build/libs/casauth.war" />
    <property name="war.name" value="idp"/>
	
	<!--
	<echo message=" "/>
    <echo message="!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"/>
    <echo message="Review the following build settings"/>
    <echo message="!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"/>

    <echo message=" "/>
    <echo message="installer.home: ${installer.home}" />
    <echo message="installer.dir: ${installer.dir}" />
    <echo message="resources.dir: ${resources.dir}" />
    <echo message="tools.dir: ${tools.dir}" />
    <echo message="webapp.dir: ${webapp.dir}" />
    <echo message="shib.cas.dir: ${shib.cas.dir}" />
    <echo message="idp.fragment.path: ${idp.fragment.path}" />
    <echo message="idp.casinvoker.libs: ${idp.casinvoker.libs}" />
    <echo message="facade.web.xml: ${facade.web.xml}" />
    <echo message="facade.war.file: ${facade.war.file}" />
    <echo message=" "/>

    <input message="Press ENTER to contrinue..."/>
	-->
	
    <!-- Installation specific property file -->
    <property file="${resources.dir}/install.properties"/>
	
    <!-- Load ant-contrib tasks -->
    <taskdef resource="net/sf/antcontrib/antlib.xml"/>

    <!-- Load Internet2 ant extensions -->
    <taskdef resource="edu/internet2/middleware/ant/antlib.xml"/>

    <target name="cleanLogs">
        <pathToAbsolutePath path="${idp.home}" addproperty="idp.home.path"/>
        <delete>
            <fileset dir="${env.CATALINA_HOME}/logs" includes="**/*.*"/>
        </delete>
        <delete>
            <fileset dir="${idp.home.path}/logs" includes="**/*.*"/>
        </delete>
    </target>

    <target name="install" description="Installs the identity provider software." depends="bridge">
    	
    	<echo message="!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"/>
    	<echo message="Be sure you have read the installation/upgrade instructions on the Shibboleth website before proceeding."/>
    	<echo message="!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"/>
        
        <input message="Where should the Shibboleth Identity Provider software be installed?" addproperty="idp.home.input" defaultvalue="${idp.home}"/>
        <var name="idp.home" value="${idp.home.input}"/>

        <pathToAbsolutePath path="${idp.home}" addproperty="idp.home.path"/>
        <pathToUrl path="${idp.home}" addproperty="idp.home.url"/>
        
        <if>
            <available file="${idp.home.path}" property="idp.home.exists"/>
            <then>
                <input message="The directory '${idp.home.path}' already exists.  Would you like to overwrite this Shibboleth configuration?" addproperty="install.config" validargs="yes,no" defaultvalue="no"/>
            </then>
            <else>
                <var name="install.config" value="yes"/>
            </else>
        </if>

        <if>
            <equals arg1="${install.config}" arg2="yes"/>
            <then>
                <input message="What is the fully qualified hostname of the Shibboleth Identity Provider server?" addproperty="idp.hostname.input" defaultvalue="${idp.hostname}"/>
                <var name="idp.hostname" value="${idp.hostname.input}"/>

                <input message="A keystore is about to be generated for you. Please enter a password that will be used to protect it." addproperty="idp.keystore.pass"/>

                <propertyfile file="${resources.dir}/install.properties">
                    <entry key="idp.home" value="${idp.home.input}"/>
                    <entry key="idp.hostname" value="${idp.hostname.input}"/>
                </propertyfile>

                <mkdir dir="${idp.home.path}"/>
                <mkdir dir="${idp.home.path}/bin"/>
                <mkdir dir="${idp.home.path}/conf"/>
                <mkdir dir="${idp.home.path}/credentials"/>
                <mkdir dir="${idp.home.path}/lib"/>
               
                <mkdir dir="${idp.home.path}/logs"/>
                <mkdir dir="${idp.home.path}/metadata"/>
                <mkdir dir="${idp.home.path}/war"/>

                <var name="idp.entity.id" value="https://${idp.hostname}/idp/shibboleth"/>
                <var name="idp.web.xml.name" value="${webapp.dir}/WEB-INF/web.xml"/>

                <regexSplit input="${idp.hostname}" regex="^.*\.(.*\..*$)" addproperty="idp.scope"/>

                <echo message="Generating signing and encryption key, certificate, and keystore. "/>
            	
            	<if>
            	    <isset property="env.IdPCertLifetime"/>
            		<then>
            			<var name="idp.cert.lifetime" value="${env.IdPCertLifetime}"/>
            		</then>
            		<else>
            			<var name="idp.cert.lifetime" value="20"/>
            		</else>
            	</if>
            		
                <selfSignedCert hostname="${idp.hostname}" uriSubjectAltNames="${idp.entity.id}" certificateLifetime="${idp.cert.lifetime}"
                	            privateKeyFile="${idp.home.path}/credentials/idp.key" certificateFile="${idp.home.path}/credentials/idp.crt" 
                	            keystoreFile="${idp.home.path}/credentials/idp.jks" keystorePassword="${idp.keystore.pass}" />
               	
               	<antcall target="copyExtraCerts" />

                <copy todir="${idp.home.path}/bin" preservelastmodified="true" overwrite="true">
                    <fileset dir="${tools.dir}/bash"/>
                    <fileset dir="${tools.dir}/bat"/>
                    <filterset begintoken="$" endtoken="$">
                        <filter token="IDP_HOME" value="${idp.home.path}"/>
                        <filter token="IDP_VERSION" value="${version}"/>
                    </filterset>
                </copy>

                <copy todir="${idp.home.path}/conf" preservelastmodified="true" overwrite="true">
                    <fileset dir="${resources.dir}/conf-tmpl"/>
                    <filterset begintoken="$" endtoken="$">
                        <filter token="IDP_HOME" value="${idp.home.path}"/>
                        <filter token="IDP_VERSION" value="${version}"/>
                        <filter token="IDP_ENTITY_ID" value="${idp.entity.id}"/>
                        <filter token="IDP_SCOPE" value="${idp.scope}"/>
                        <filter token="IDP_CERTIFICATE" value="${idp.cert}"/>
                        <filter token="IDP_HOSTNAME" value="${idp.hostname}"/>
                        <filter token="IDP_LOG_LEVEL" value="${idp.logging.level}" />
                        <filter token="IDP_LDAP_LOG_LEVEL" value="${idp.logging.ldap.level}" />

                        <!-- LDAP Login Handler for UsernamePassword authentication -->
                        <filter token="IDP_LDAP_URL" value="${idp.login.ldap.url}" />
                        <filter token="IDP_LDAP_BASEDN" value="${idp.login.ldap.basedn}" />
                        <filter token="IDP_LDAP_SSL" value="${idp.login.ldap.ssl}" />
                        <filter token="IDP_LDAP_TLS" value="${idp.login.ldap.tls}" />
                        <filter token="IDP_LDAP_FILTER" value="${idp.login.ldap.userfilter}" />
                        <filter token="IDP_LDAP_TREESEARCH" value="${idp.login.ldap.subtreesearch}" />

                    </filterset>
                </copy>

                <stringFromFile input="${idp.home.path}/credentials/idp.crt" addProperty="idp.cert"/>
                <regexSplit input="${idp.cert}" regex="\A.*-----\s((?:.*\s)*)-----END.*\Z" addproperty="idp.metadata.cert"/>
                <copy todir="${idp.home.path}/metadata" preservelastmodified="true" overwrite="true">
                    <fileset dir="${resources.dir}/metadata-tmpl"/>
                    <filterset begintoken="$" endtoken="$">
                        <filter token="IDP_ENTITY_ID" value="${idp.entity.id}"/>
                        <filter token="IDP_SCOPE" value="${idp.scope}"/>
                        <filter token="IDP_CERTIFICATE" value="${idp.metadata.cert}"/>
                        <filter token="IDP_HOSTNAME" value="${idp.hostname}"/>
                    </filterset>
                </copy>
            </then>
            <else>
                <echo message="Using existing Idp home path: ${idp.home.path}" />

                <propertyfile file="${resources.dir}/install.properties">
                    <entry key="idp.home" value="${idp.home.input}"/>
                </propertyfile>
            	

                <if> 
                    <available file="${idp.home.path}/conf/web.xml" property="idp.web.xml.exists"/>
                    <then>
                        <echo message="Using ${idp.home.path}/conf/web.xml rather than default web.xml"/>
                        <var name="idp.web.xml.name" value="${idp.home.path}/conf/web.xml"/>
                    </then>
                    <else>
                        <var name="idp.web.xml.name" value="${webapp.dir}/WEB-INF/web.xml"/>
                        <echo message="Using default IdP web.xml file at: ${idp.web.xml.name}" />
                    </else>
                </if>
                

                <!-- 
                    Even if we're not overwritting the config we should still add new files, for example, files added
                    in a new release.
                -->
                <var name="idp.entity.id" value="https://${idp.hostname}/idp/shibboleth"/>
                <regexSplit input="${idp.hostname}" regex="^.*\.(.*\..*$)" addproperty="idp.scope"/>
                <stringFromFile input="${idp.home.path}/credentials/idp.crt" addProperty="idp.cert"/>
                    
                <copy todir="${idp.home.path}/bin" preservelastmodified="true" overwrite="false">
                    <fileset dir="${tools.dir}/bash">
                        <present present="srconly" targetdir="${idp.home.path}/bin"/>
                	</fileset>
                    <fileset dir="${tools.dir}/bat">
                    	<present present="srconly" targetdir="${idp.home.path}/bin"/>
                	</fileset>
                    <filterset begintoken="$" endtoken="$">
                        <filter token="IDP_HOME" value="${idp.home.path}"/>
                        <filter token="IDP_VERSION" value="${version}"/>
                    </filterset>
                </copy>

                <copy todir="${idp.home.path}/conf" preservelastmodified="true" overwrite="false">
                    <fileset dir="${resources.dir}/conf-tmpl">
                    	<present present="srconly" targetdir="${idp.home.path}/conf"/>
                	</fileset>
                    <filterset begintoken="$" endtoken="$">
                        <filter token="IDP_HOME" value="${idp.home.path}"/>
                        <filter token="IDP_VERSION" value="${version}"/>
                        <filter token="IDP_ENTITY_ID" value="${idp.entity.id}"/>
                        <filter token="IDP_SCOPE" value="${idp.scope}"/>
                        <filter token="IDP_CERTIFICATE" value="${idp.cert}"/>
                        <filter token="IDP_HOSTNAME" value="${idp.hostname}"/>
                    </filterset>
                </copy>
            </else>
        </if>
                            
        <chmod file="${idp.home.path}/bin/*.sh" perm="+x"/>

    	<delete>
    	    <fileset dir="${idp.home.path}/lib" includes="**/*.jar"/>
        </delete>
        <antcall target="cleanLogs" />

        <copy todir="${idp.home.path}/lib" preservelastmodified="true" overwrite="true">
            <fileset dir="${basedir}/lib"/>
            <fileset dir="${idp.casinvoker.libs}" />
        </copy>
        <copy todir="${env.CATALINA_HOME}/endorsed" preservelastmodified="true" failonerror="false" overwrite="true">
            <fileset dir="endorsed"/>
        </copy>

        <!-- create web.xml -->
        <copy file="${idp.web.xml.name}" todir="${installer.dir}" preservelastmodified="true" overwrite="true">
            <filterset begintoken="$" endtoken="$">
                <filter token="IDP_HOME" value="${idp.home.url}"/>
                <filter token="IDP_HOSTNAME" value="${idp.hostname}"/>
                <filter token="IDP_STATUS_ALLOWED_IPS" value="${idp.status.page.allowedips}"/>
            </filterset>
        </copy>

        <!-- build the war file -->
        <war warfile="${installer.dir}/${war.name}.war" webxml="${installer.dir}/web.xml">
            <lib dir="${idp.home.path}/lib" excludes="servlet-api*.jar,jsp-api*.jar"/>
            <webinf dir="${webapp.dir}/WEB-INF" excludes="web.xml"/>
            <fileset dir="${webapp.dir}" excludes="WEB-INF/**"/>
        </war>
    	<copy file="${installer.dir}/${war.name}.war" todir="${idp.home.path}/war" preservelastmodified="true" overwrite="true"/>

        <!-- Remove generated files -->
        <delete file="${installer.dir}/web.xml"/>
    	<delete file="${installer.dir}/${war.name}.war"/>
    	
    </target>

    <target name="bridge" description="Deploys the shib-cas authenticator">
        <echo message="Preparing web.xml for the bridge based on installer settings..." />

        <echo>Prepared the facade [web.xml] file at [${facade.web.xml}]</echo>
        <echo>The facade war file will be generated at [${facade.war.file}]</echo>

        <delete file="${facade.web.xml}" />
        <delete file="${facade.war.file}" />

        <copy tofile="${facade.web.xml}" preservelastmodified="true" overwrite="true"
              file="${etc.dir}/web.xml">
            <filterset begintoken="$" endtoken="$">
                <filter token="CAS_HOSTNAME" value="${cas.hostname}"/>
                <filter token="IDP_HOSTNAME" value="${idp.hostname}"/>
            </filterset>
        </copy>

        <pathToAbsolutePath path="${idp.home}" addproperty="idp.home.path"/>
        <echo message="Idp installer home directory is ${installer.home}" />

        <copy tofile="${shib.cas.dir}/gradle.properties" preservelastmodified="true" overwrite="true"
              file="${shib.cas.dir}/gradle.sample.properties">
            <filterset begintoken="$" endtoken="$">
                <filter token="IDP_INSTALLER_HOME" value="${installer.home}"/>
            </filterset>
        </copy>
        <replace file="${shib.cas.dir}/gradle.properties" token="\" value="/"/>

        <echo message="Cleaning up lingering artifacts from last deployment..." />
        <delete dir="${env.CATALINA_HOME}/webapp/casauth" />
        <delete file="${env.CATALINA_HOME}/webapp/casauth.war" />

        <condition property="gradlew" value="gradlew.bat" else="gradlew">
            <os family="windows" />
        </condition>
       
        <echo message="Launching gradle build at ${shib.cas.dir}/${gradlew}..." />
        <chmod file="${shib.cas.dir}/*.sh" perm="+x"/>
        <chmod file="${shib.cas.dir}/*.bat" perm="+x"/>

        <exec executable="${shib.cas.dir}/${gradlew}" dir="${shib.cas.dir}" failonerror="true" failifexecutionfails="true"/>         

        <echo message="Deploying the final casauth.war file..." />
        <copy file="${facade.war.file}" todir="${env.CATALINA_HOME}/webapps" overwrite="true" />
        
        <delete file="${facade.web.xml}" />
        <delete file="${shib.cas.dir}/gradle.properties" />
        <echo message="Shib-CAS authenticator has been successfully deployed to ${env.CATALINA_HOME}\webapps" />
    </target>

    <target name="fragment" description="Deploys the IdP's web fragment file...">
        <echo message="Preparing web.xml for the bridge based on installer settings..." />
        <pathToAbsolutePath path="${idp.home}" addproperty="idp.home.path"/>
        <copy todir="${idp.fragment.path}" preservelastmodified="true" overwrite="true"
              file="${etc.dir}/idp.xml">
            
            <filterset begintoken="$" endtoken="$">
                <filter token="IDP_HOME" value="${idp.home.path}"/>
            </filterset>
            
        </copy>
        <replace file="${idp.fragment.path}/idp.xml" token="\" value="/"/>
    </target>

    <target name="all" description="Install idp, bridge and fragment">
        <antcall target="install" />
        <antcall target="fragment" />
    </target>

    <target name="renew-cert" description="Create a new certificate/key pair."> 
        <input message="This will create a new set of credentials for your IdP.  If you ran this command previously and still have '*.new' files, they will be overwritten.  Do you wish to proceed?" 
        	   addproperty="renew.cert.do" validargs="yes,no" defaultvalue="no"/> 
        <if> 
        	<equals arg1="${renew.cert.do}" arg2="yes"/> 
            <then> 
            	
                <input message="Where is the Shibboleth Identity Provider installed?" addproperty="idp.home.input" defaultvalue="${idp.home}"/>
                <var name="idp.home" value="${idp.home.input}"/>
              
                <pathToAbsolutePath path="${idp.home}" addproperty="idp.home.path"/> 
            
                <input message="What is the fully qualified hostname of the Shibboleth Identity Provider server?" addproperty="idp.hostname.input" defaultvalue="${idp.hostname}"/> 
                <var name="idp.hostname" value="${idp.hostname.input}"/> 
                <var name="idp.entity.id" value="https://${idp.hostname}/idp/shibboleth"/> 

                <input message="A keystore is about to be generated for you. Please enter a password that will be used to protect it." addproperty="idp.keystore.pass"/> 

                <if>
                    <isset property="env.IdPCertLifetime"/>
                    <then>
                        <var name="idp.cert.lifetime" value="${env.IdPCertLifetime}"/>
                    </then>
                    <else>
                        <var name="idp.cert.lifetime" value="20"/>
                    </else>
                </if>
        
                <echo message="Generating new signing and encryption key, certificate, and keystore. "/> 
                <selfSignedCert hostname="${idp.hostname}" certificateLifetime="${idp.cert.lifetime}" uriSubjectAltNames="${idp.entity.id}"
                	            privateKeyFile="${idp.home.path}/credentials/idp.key.new" certificateFile="${idp.home.path}/credentials/idp.crt.new"  
                	            keystoreFile="${idp.home.path}/credentials/idp.jks.new"  keystorePassword="${idp.keystore.pass}" /> 
               	<antcall target="copyExtraCerts" />
            </then>
        </if>
    </target>

    <target name="copyExtraCerts">
    	<copy todir="${idp.home.path}/credentials" overwrite="true" failonerror="true">
			    	<fileset dir="${etc.dir}" includes="**/*.pem"/>
	  	</copy>
    </target>
</project>